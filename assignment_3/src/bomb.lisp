;;; Welome to the Assignment 3 of the "Robot Programming with Lisp" course.

;;; This time we leave our grid world aside for a week while we're waiting
;;; for the late submissions of assignment 2,
;;; and meanwhile the task for this week is to implement a bomb as a closure
;;; and ask the user to try to neutralize it.

;;; A bomb has a number of wires of different (unique) colors situated sequentially
;;; within the mechanism. The mechanism is concealed, so it is impossible
;;; to know what is the sequence of colors inside the bomb.
;;; Below a bomb with 5 wires is illustrated.
;;;    -------
;;;   /       \
;;;   | ||||| |
;;;    \xxxxx/
;;;     |||||
;;; The wires of the bomb come out on the bottom in a shuffled way.
;;; (The "x"-s represent the part of the bomb where the wires shuffle.)
;;; In order to neutralize the bomb it is necessary to cut the wires
;;; outside of the bomb one after another in a correct order.
;;; As the neutralizer has no idea of what is inside the bomb,
;;; he will be cutting the wires by guessing (more or less randomly).
;;; The bomb is neutralized once the first half of the wires
;;; inside the bomb has all been cut.
;;; E.g., if we have 5 wires: "red -> blue -> green -> yellow -> black"
;;; the bomb will be neutralized as soon as first 3 are cut:
;;; "red", "blue" and "green".
;;; Otherwise, if more than 75% of all the wires has been cut
;;; and the first half has still uncut wires, the bomb explodes.
;;; For our 5 wires 75% will be 4, i.e. if after 4 tries
;;; "red", "blue" and "green" are still not cut, the bomb explodes.

;;; You are supposed to interactively ask the user to pick up a wire
;;; to cut a certain number of times and then print statements
;;; for either the bomb exploding or the bomb being successfully
;;; neutralized.

;;; Note: you may use functionality from the Alexandria library if you want.
;;; For that you need to call "catkin_make" in your "ros_ws" after
;;; updating the "lisp_course_material" repository ("git pull origin master")


(defvar *colors* '(red green blue gray white black orange purple yellow cyan)
  "A list of all possible colors of wires in the bomb")

;; The bomb is a function that returns a closure with two lexical
;; bindings: one variable (`wires') is the associative list
;; of wires of the bomb where a color is associated
;; with the state of being cut or not cut.
;; The other variable (`tries-remaining') is the number of tries
;; the neutralizer has left before the bomb explodes.
;; In general, the bomb should look like the following:
(defun bomb (num-wires)
  "`num-wires' is the number of wires inside the bomb.
`num-wires' should be <= 10 because all the wires have a unique color."
  (let ((tries-remaining ...)
        (wires ...))
    (lambda (wire-color)
      ;; change the cut/not-cut state of the wire colored like `wire-color'
      ;; decrement the counter
      ;; check if half of the consecutive wires of the bomb are cut
      ;; either explode or neutralize or do nothing (print statement)
      )))

;; This is the main function.
(defun try-neutralize ()
  ;; Create a bomb with a certain number of wires (colors should be chosen randomly).
  ;; Ask a user to chose one of the colors to cut.
  ;; Call the closure generated by bomb with a color picked by user.
  ;; Repeat as many times until the bomb either explodes or is neutralized.
  )

